// <auto-generated />
using System;
using FinalProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FinalProject.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20191115145616_ann")]
    partial class ann
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FinalProject.Models.Authors", b =>
                {
                    b.Property<int>("Author_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author_name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Author_id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("FinalProject.Models.Books", b =>
                {
                    b.Property<int>("Book_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Book_dec")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Book_page");

                    b.Property<DateTime>("Book_pub");

                    b.Property<string>("Book_shortDec")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Book_title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Pub_id");

                    b.HasKey("Book_id");

                    b.HasIndex("Pub_id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("FinalProject.Models.BooksHaveAuthors", b =>
                {
                    b.Property<int>("Author_id");

                    b.Property<int>("Book_id");

                    b.HasKey("Author_id", "Book_id");

                    b.HasIndex("Book_id");

                    b.ToTable("BooksHaveAuthors");
                });

            modelBuilder.Entity("FinalProject.Models.BooksInventory", b =>
                {
                    b.Property<int>("Book_id");

                    b.Property<int>("User_id");

                    b.HasKey("Book_id", "User_id");

                    b.HasIndex("User_id");

                    b.ToTable("BooksInventories");
                });

            modelBuilder.Entity("FinalProject.Models.BooksRequests", b =>
                {
                    b.Property<int>("Book_id");

                    b.Property<int>("User_id");

                    b.Property<string>("RequestDate");

                    b.HasKey("Book_id", "User_id");

                    b.HasIndex("User_id");

                    b.ToTable("BooksRequests");
                });

            modelBuilder.Entity("FinalProject.Models.Publishers", b =>
                {
                    b.Property<int>("Pub_id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Pub_name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Pub_id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("FinalProject.Models.Roles", b =>
                {
                    b.Property<int>("Role_id");

                    b.Property<string>("Role_name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Role_id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FinalProject.Models.Userss", b =>
                {
                    b.Property<int>("User_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("User_id");

                    b.HasIndex("Role_id");

                    b.ToTable("Userss");
                });

            modelBuilder.Entity("FinalProject.Models.Books", b =>
                {
                    b.HasOne("FinalProject.Models.Publishers", "Publishers")
                        .WithMany("Books")
                        .HasForeignKey("Pub_id");
                });

            modelBuilder.Entity("FinalProject.Models.BooksHaveAuthors", b =>
                {
                    b.HasOne("FinalProject.Models.Authors", "Authors")
                        .WithMany("BooksHaveAuthors")
                        .HasForeignKey("Author_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Books", "Book")
                        .WithMany("BooksHaveAuthors")
                        .HasForeignKey("Book_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.BooksInventory", b =>
                {
                    b.HasOne("FinalProject.Models.Books", "Book")
                        .WithMany("BooksInventories")
                        .HasForeignKey("Book_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Userss", "User")
                        .WithMany("BooksInventories")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.BooksRequests", b =>
                {
                    b.HasOne("FinalProject.Models.Books", "Book")
                        .WithMany("BooksRequests")
                        .HasForeignKey("Book_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Userss", "User")
                        .WithMany("BooksRequests")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinalProject.Models.Userss", b =>
                {
                    b.HasOne("FinalProject.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
